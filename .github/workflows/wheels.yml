name: Build

on: [push, pull_request]

# on: create 

jobs:
  build_wheels:
    name: Build python wheels on ${{ matrix.os }} 
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [
             # macos-12,
             windows-latest,
             # ubuntu-latest
             ]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v3

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Windows - Enable Developer Command Prompt
        uses: ilammy/msvc-dev-cmd@v1.7.0

      #- name: macos dependencies
      #  if: runner.os == 'macos'
      #  run: |
      #    brew install liblo
      #    git clone https://github.com/radarsat1/liblo
      #    cd liblo
      #    mkdir macosbuild
      #    cd macosbuild
      #    cmake ../cmake
      #    cmake --build .
      #    sudo cmake --install .

      - name: Install dependencies windows
        if: runner.os == 'windows'
        run: |
            git clone https://github.com/radarsat1/liblo
            cd liblo
            New-Item -ItemType Directory -Force -Path "windowsbuild"
            cd windowsbuild
            cmake -DWITH_TESTS=OFF -DWITH_CPP_TESTS=OFF -DWITH_EXAMPLES=OFF -DWITH_TOOLS=OFF ../cmake
            cmake --build .
            Get-ChildItem -Recurse
            cmake --install .

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like:
        env:
            MACOSX_DEPLOYMENT_TARGET: 11
            CIBW_BUILD: 'cp39-* cp310-* cp311-* cp312-*'
            CIBW_ARCHS_MACOS: 'arm64'
            CIBW_SKIP: 'pp* *686* *-musllinux_*'
            # CIBW_BEFORE_ALL_LINUX: yum search liblo; yum install -y liblo-devel
            CIBW_BEFORE_ALL_LINUX: git clone https://github.com/radarsat1/liblo; cd liblo; mkdir linuxbuild; cd linuxbuild; cmake ../cmake; cmake --build .; cmake --install .
            CIBW_BEFORE_ALL_MACOS: brew install liblo
            CIBW_REPAIR_WHEEL_COMMAND_MACOS: delocate-wheel --require-archs {delocate_archs} -w {dest_dir} -v {wheel} --require-target-macos-version 11
        
            

      # CIBW_SOME_OPTION: value
            
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

      - name: Upload wheels
        env:
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.TWINETOKEN }}
        run: |
            echo $TWINE_USERNAME
            echo $TWINE_PASSWORD
            python -m pip install -U twine virtualenv
            twine upload --skip-existing wheelhouse/*.whl
        continue-on-error: true

